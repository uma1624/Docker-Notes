
what is container ?
A container is a lightweight, standalone, and executable software package that includes everything needed to run an application.
   including the code, runtime, libraries, and system tools.

why continer's are lightweight ?
Containers are lightweight because they share the host operating system's kernel and resources rather than virtualizing an entire operating system like traditional virtual machines (VMs).
Here's why containers are lightweight:


Docker Daemon  :- 
Functionality: Listens for Docker API requests and manages Docker objects like images, containers, networks, and volumes.
Inter-daemon Communication: Can communicate with other daemons to manage Docker services.

Docker Client  :- 
Primary Interface: Used by Docker users to interact with Docker through commands like docker run.
API Use: Sends commands to the Docker daemon using the Docker API.
Multi-daemon Communication: Can communicate with more than one daemon.

Docker Registries :-
Functionality: Stores Docker images.
Public Registry: Docker Hub is a public registry used by default.
Private Registry: Users can run their own private registry.
Commands: Images are pulled with docker pull or docker run and pushed with docker push.

Dockerfile :- 
Purpose: A file containing steps to build a Docker image.
Syntax: Simple syntax for defining steps to create and run the image.
Efficiency: Each instruction creates a layer, making image building efficient by only rebuilding changed layers.
============================
Docker Swarm :- 
Docker Swarm is Docker's native clustering and orchestration tool.
With Docker Swarm, you can deploy and manage a cluster of Docker hosts as a single virtual system, 
making it easy to scale your applications, distribute workloads, and ensure high availability.
