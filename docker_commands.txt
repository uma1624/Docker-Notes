Basic Docker Commands
====================
docker run <image>: docker run is used to create and start a new container from a Docker image. For example, docker run nginx will start an Nginx server container. If the image is not found locally, Docker will pull it from the Docker Hub.

docker start <container> : docker start is used to start an existing stopped container. 


docker ps: Lists all running containers. Use docker ps -a to list both running and stopped containers. It's useful for seeing what's currently running on your machine.

docker stop <container_id>: Stops a running container. You can find the container ID by using the docker ps command. This is essential for managing the lifecycle of your containers.

docker rm <container_id>: Removes a stopped container. It's a cleanup command to keep your environment tidy.

docker images: Lists all Docker images on your local machine. It's useful for seeing what images you have available locally.

docker rmi <image_id>: Removes a Docker image from your local machine. If you no longer need an image, this command helps free up space.

docker pull <image>: Downloads an image from Docker Hub to your local machine. Useful for fetching images to start containers from.

docker build -t <tag> .: Builds a Docker image from a Dockerfile in the current directory. The -t option allows you to tag your image with a name for easy reference.

docker logs <container_id>: Fetches the logs of a container. Very useful for debugging issues with your applications running in containers.

docker exec -it <container_id> /bin/bash: Allows you to execute commands inside a running container. For example, you can start a bash shell inside the container to inspect its state or modify files.

Network and Data Management
===================================
docker network ls: Lists all networks. Docker networks allow containers to communicate with each other and with the outside world.

docker volume ls: Lists all volumes. Volumes are used for persisting data generated by and used by Docker containers.

docker network create <name>: Creates a new network. This allows you to define how your containers communicate.

docker volume create <name>: Creates a new volume. This is useful for data persistence beyond the lifecycle of a container.

Image and Container Management

docker commit <container_id> <repository>:<tag>: Creates a new image from a container's changes. Useful for debugging or capturing a container's state at a specific point in time.

docker tag <image_id> <repository>:<tag>: Tags an image for organization or versioning purposes, essential for image management.

docker push <repository>:<tag>: Pushes an image to a Docker repository (like Docker Hub). This is how you share images with your team or the public.

Docker Compose Commands
===================================
Docker Compose is a tool for defining and running multi-container Docker applications.

docker-compose up: Starts the containers defined in a docker-compose.yml file. It's a convenient way to start multiple containers that are configured to work together.

docker-compose down: Stops and removes the containers and networks created by docker-compose up. It's the counterpart to docker-compose up for cleaning up.

docker-compose build: Builds or rebuilds services specified in a docker-compose.yml file. Useful for applying changes to your Dockerfiles.

Advanced Commands for Debugging and Inspection

docker inspect <object_name>: Returns detailed information on Docker objects (containers, images, volumes, networks). It's very useful for debugging and understanding the configuration of your Docker environment.

docker stats: Displays a live stream of container(s) resource usage statistics. It helps in monitoring the performance impact of your containers.

docker system prune: Removes unused data (containers, networks, images (both dangling and unreferenced), and optionally, volumes). It's an essential command for freeing up space.

docker login: Logs into a Docker registry. Required for pushing and pulling to private repositories.

docker logout: Logs out from a Docker
